import{_ as n,D as l,o as p,g as o,J as e,h as t,Q as s}from"./chunks/framework.f67d7268.js";const C=JSON.parse('{"title":"08Reactor操作符（下）：如何多样化裁剪响应式流？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring 响应式编程实战_文档/(6990) 08  Reactor 操作符（下）：如何多样化裁剪响应式流？.md","filePath":"posts/backEnd/Spring 响应式编程实战_文档/(6990) 08  Reactor 操作符（下）：如何多样化裁剪响应式流？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring 响应式编程实战_文档/(6990) 08  Reactor 操作符（下）：如何多样化裁剪响应式流？.md"},r=s(`<h1 id="_08reactor操作符-下-如何多样化裁剪响应式流" tabindex="-1">08Reactor操作符（下）：如何多样化裁剪响应式流？ <a class="header-anchor" href="#_08reactor操作符-下-如何多样化裁剪响应式流" aria-label="Permalink to &quot;08Reactor操作符（下）：如何多样化裁剪响应式流？&quot;">​</a></h1><p>通过前两讲的内容可以知道，Reactor 框架为我们提供了各种操作符，使用这些操作符可以高效地操作 Flux 和 Mono 对象。Reactor 中的操作符可以分成不同的类型，上一讲我们关注转换、过滤和组合类的操作符，而今天我将继续为你介绍剩余的条件、裁剪、工具类的操作符。</p><h3 id="条件操作符" tabindex="-1">条件操作符 <a class="header-anchor" href="#条件操作符" aria-label="Permalink to &quot;条件操作符&quot;">​</a></h3><p>所谓条件操作符，本质上就是提供了一个判断的依据来确定是否处理流中的元素。Reactor 中常用的条件操作符有 defaultIfEmpty、takeUntil、takeWhile、skipUntil 和 skipWhile 等，下面我将分别介绍。</p><h4 id="defaultifempty-操作符" tabindex="-1">defaultIfEmpty 操作符 <a class="header-anchor" href="#defaultifempty-操作符" aria-label="Permalink to &quot;defaultIfEmpty 操作符&quot;">​</a></h4><p>defaultIfEmpty 操作符针对空数据流提供了一个简单而有用的处理方法。该操作符用来返回来自原始数据流的元素，如果原始数据流中没有元素，则返回一个默认元素。</p><p>defaultIfEmpty 操作符在实际开发过程中应用广泛，通常用在对方法返回值的处理上。如下所示的就是在 Controller 层中对 Service 层返回结果的一种常见处理方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/orders/{id}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ResponseEntity</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Order</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findOrderById</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	String id) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> orderService.</span><span style="color:#B392F0;">findOrderById</span><span style="color:#E1E4E8;">(id)</span></span>
<span class="line"><span style="color:#E1E4E8;">         .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(ResponseEntity</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">ok)</span></span>
<span class="line"><span style="color:#E1E4E8;">         .</span><span style="color:#B392F0;">defaultIfEmpty</span><span style="color:#E1E4E8;">(ResponseEntity</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/orders/{id}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ResponseEntity</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Order</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findOrderById</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	String id) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> orderService.</span><span style="color:#6F42C1;">findOrderById</span><span style="color:#24292E;">(id)</span></span>
<span class="line"><span style="color:#24292E;">         .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(ResponseEntity</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">ok)</span></span>
<span class="line"><span style="color:#24292E;">         .</span><span style="color:#6F42C1;">defaultIfEmpty</span><span style="color:#24292E;">(ResponseEntity</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">404</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，这里使用 defaultIfEmpty 操作符实现默认返回值。在示例代码所展示的 HTTP 端点中，当找不到指定的数据时，我们可以通过 defaultIfEmpty 方法返回一个空对象以及 404 状态码。</p><h4 id="takeuntil-takewhile-操作符" tabindex="-1">takeUntil/takeWhile 操作符 <a class="header-anchor" href="#takeuntil-takewhile-操作符" aria-label="Permalink to &quot;takeUntil/takeWhile 操作符&quot;">​</a></h4><p>takeUntil 操作符的基本用法是 takeUntil (Predicate&lt;? super T&gt; predicate)，其中 Predicate 代表一种断言条件，该操作符将从数据流中提取元素直到断言条件返回 true。takeUntil 的示例代码如下所示，我们希望从一个包含 100 个连续元素的序列中获取 1~10 个元素。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">takeUntil</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">takeUntil</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>类似的，takeWhile 操作符的基本用法是 takeWhile (Predicate&lt;? super T&gt; continuePredicate)，其中 continuePredicate 代表的也是一种断言条件。与 takeUntil 不同的是，takeWhile 会在 continuePredicate 条件返回 true 时才进行元素的提取。takeWhile 的示例代码如下所示，这段代码的执行效果与 takeUntil 的示例代码一致。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">takeWhile</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">takeWhile</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>讲到这里，让我们回顾上一讲介绍的第一个转换操作符 buffer。事实上，Reactor 框架中同样也提供了 bufferUntil 和 bufferWhile 操作符来实现数据收集，这两个操作符用到了和 takeUntil/takeWhile 完全一样的断言机制，如下代码演示了 bufferUntil 的使用方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">bufferUntil</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">bufferUntil</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>以上代码的执行结果如下所示，这里所设置的断言就是&quot;i % 2 == 0&quot;这一条件。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[1, 2]</span></span>
<span class="line"><span style="color:#E1E4E8;">[3, 4]</span></span>
<span class="line"><span style="color:#E1E4E8;">[5, 6]</span></span>
<span class="line"><span style="color:#E1E4E8;">[7, 8]</span></span>
<span class="line"><span style="color:#E1E4E8;">[9, 10]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[1, 2]</span></span>
<span class="line"><span style="color:#24292E;">[3, 4]</span></span>
<span class="line"><span style="color:#24292E;">[5, 6]</span></span>
<span class="line"><span style="color:#24292E;">[7, 8]</span></span>
<span class="line"><span style="color:#24292E;">[9, 10]</span></span></code></pre></div><p>对应的，bufferWhile 的使用方法和执行结果分别如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">bufferWhile</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">bufferWhile</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[2]</span></span>
<span class="line"><span style="color:#E1E4E8;">[4]</span></span>
<span class="line"><span style="color:#E1E4E8;">[6]</span></span>
<span class="line"><span style="color:#E1E4E8;">[8]</span></span>
<span class="line"><span style="color:#E1E4E8;">[10]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[2]</span></span>
<span class="line"><span style="color:#24292E;">[4]</span></span>
<span class="line"><span style="color:#24292E;">[6]</span></span>
<span class="line"><span style="color:#24292E;">[8]</span></span>
<span class="line"><span style="color:#24292E;">[10]</span></span></code></pre></div><h4 id="skipuntil-skipwhile-操作符" tabindex="-1">skipUntil/skipWhile 操作符 <a class="header-anchor" href="#skipuntil-skipwhile-操作符" aria-label="Permalink to &quot;skipUntil/skipWhile 操作符&quot;">​</a></h4><p>与 takeUntil 相对应，skipUntil 操作符的基本用法是 skipUntil (Predicate&lt;? super T&gt; predicate)。skipUntil 将丢弃原始数据流中的元素直到 Predicate 返回 true。</p><p>同样，与 takeWhile 相对应，skipWhile 操作符的基本用法是 skipWhile (Predicate&lt;? super T&gt; continuePredicate)，当 continuePredicate 返回 true 时才进行元素的丢弃。这两个操作符都很简单，就不具体展开讨论了。</p><p>下面来说说裁剪操作符。</p><h3 id="裁剪操作符" tabindex="-1">裁剪操作符 <a class="header-anchor" href="#裁剪操作符" aria-label="Permalink to &quot;裁剪操作符&quot;">​</a></h3><p>裁剪操作符通常用于统计流中的元素数量，或者检查元素是否具有一定的属性。在 Reactor 中，常用的裁剪操作符有 any 、concat、count 和 reduce 等。</p><h4 id="any-操作符" tabindex="-1">any 操作符 <a class="header-anchor" href="#any-操作符" aria-label="Permalink to &quot;any 操作符&quot;">​</a></h4><p>any 操作符用于检查是否至少有一个元素具有所指定的属性，示例代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">17</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">any</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(isExisted </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(isExisted));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">17</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">any</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(isExisted </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(isExisted));</span></span></code></pre></div><p>在这个 Flux 流中存在一个元素 16 可以被 2 除尽，所以控制台将输出&quot;true&quot;。</p><p>类似的，Reactor 中还存在一个 all 操作符，用来检查流中元素是否都满足同一属性，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ela&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ade&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;pqa&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;kang&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(isAllContained </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(isAllContained));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ela&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ade&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;pqa&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;kang&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(isAllContained </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(isAllContained));</span></span></code></pre></div><p>显然，在这个 Flux 流中所有元素都包含了字符&quot;a&quot;，所以控制台也将输出&quot;true&quot;。</p><h4 id="concat-操作符" tabindex="-1">concat 操作符 <a class="header-anchor" href="#concat-操作符" aria-label="Permalink to &quot;concat 操作符&quot;">​</a></h4><p>concat 操作符用来合并来自不同 Flux 的数据。与上一讲中所介绍的 merge 操作符不同，这种合并采用的是顺序的方式，所以严格意义上并不是一种合并操作，所以我们把它归到裁剪操作符类别中。</p><p>例如，如果执行下面这段代码，我们将在控制台中依次看到 1 到 10 这 10 个数字。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        ).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        ).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h4 id="reduce-操作符" tabindex="-1">reduce 操作符 <a class="header-anchor" href="#reduce-操作符" aria-label="Permalink to &quot;reduce 操作符&quot;">​</a></h4><p>裁剪操作符中最经典的就是这个 reduce 操作符。reduce 操作符对来自 Flux 序列中的所有元素进行累积操作并得到一个 Mono 序列，该 Mono 序列中包含了最终的计算结果。reduce 操作符示意图如下所示。</p>`,40),E=s(`<p>reduce 操作符示意图（来自 Reactor 官网）</p><p>在上图中，具体的累积计算很简单，我们也可以通过一个 BiFunction 来实现任何自定义的复杂计算逻辑。reduce 操作符的示例代码如下所示，这里的 BiFunction 就是一个求和函数，用来对 1 到 10 的数字进行求和，运行结果为 55。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((x, y) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y)</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((x, y) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>与 reduce 操作符类似的还有一个 reduceWith 操作符，用来在 reduce 操作时指定一个初始值。reduceWith 操作符的代码示例如下所示，我们使用 5 来初始化求和过程，显然得到的结果将是 60。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">reduceWith</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, (x, y) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y)</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">reduceWith</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, (x, y) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>以上就是三种裁剪操作符的介绍，应该很好理解，下面我们来看看工具操作符。</p><h3 id="工具操作符" tabindex="-1">工具操作符 <a class="header-anchor" href="#工具操作符" aria-label="Permalink to &quot;工具操作符&quot;">​</a></h3><p>Reactor 中常用的工具操作符有 subscribe、timeout、block、log 和 debug 等。</p><h4 id="subscribe-操作符" tabindex="-1">subscribe 操作符 <a class="header-anchor" href="#subscribe-操作符" aria-label="Permalink to &quot;subscribe 操作符&quot;">​</a></h4><p>说起 subscribe 操作符，我已经在&quot;06 | 流式操作：如何使用 Flux 和 Mono 高效构建响应式数据流&quot;中讲到订阅响应式流时介绍过很多，这里再带你回顾一下通过该操作符订阅序列的最通用方式，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//订阅序列的最通用方式，可以为我们的Subscriber实现提供所需的任意行为</span></span>
<span class="line"><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(Subscriber</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> subscriber);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//订阅序列的最通用方式，可以为我们的Subscriber实现提供所需的任意行为</span></span>
<span class="line"><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(Subscriber</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> subscriber);</span></span></code></pre></div><p>基于这种方式，如果默认的 subscribe() 方法没有提供所需的功能，我们可以实现自己的 Subscriber。一般而言，我们总是可以直接实现响应式流规范所提供的 Subscriber 接口，并将其订阅到流。实现一个自定义的 Subscriber 并没有想象中那么困难，这里我给你演示一个简单的实现示例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Subscriber&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; subscriber </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Subscriber&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> Subscription subscription; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onSubscribe</span><span style="color:#E1E4E8;">(Subscription </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                subscription </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s;</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;initialization&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                subscription.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onNext</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;onNext:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> s);</span></span>
<span class="line"><span style="color:#E1E4E8;">                subscription.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onComplete</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;onComplete&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onError</span><span style="color:#E1E4E8;">(Throwable </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;onError:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> t.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Subscriber&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; subscriber </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Subscriber&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> Subscription subscription; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onSubscribe</span><span style="color:#24292E;">(Subscription </span><span style="color:#E36209;">s</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                subscription </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s;</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;initialization&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                subscription.</span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onNext</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">s</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;onNext:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s);</span></span>
<span class="line"><span style="color:#24292E;">                subscription.</span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onComplete</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;onComplete&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onError</span><span style="color:#24292E;">(Throwable </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;onError:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> t.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>在这个自定义 Subscriber 实现中，我们首先持有对订阅令牌 Subscription 的引用。由于订阅和数据处理可能发生在不同的线程中，因此我们使用 volatile 关键字来确保所有线程都具有对 Subscription 实例的正确引用。</p><p>当订阅到达时，我们会通过 onSubscribe 回调通知 Subscriber。在这里，我们保存订阅令牌并初始化请求。</p><p>你应该注意到，在 onNext 回调中，我们打印接收到的数据并请求下一个元素。在这种情况下，我们执行 subscription.request(1) 方法，也就是说使用简单的拉模型来管理背压。</p><p>剩下的 onComplete 和 onError 方法我们都只是打印了一下日志。</p><p>现在，让我们通过 subscribe() 方法来使用这个 Subscriber，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; flux </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;12&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;23&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;34&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        flux.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(subscriber);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; flux </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;12&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;23&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;34&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        flux.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(subscriber);</span></span></code></pre></div><p>上述代码应该产生以下控制台输出的结果。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">initialization</span></span>
<span class="line"><span style="color:#E1E4E8;">onNext:12</span></span>
<span class="line"><span style="color:#E1E4E8;">onNext:23</span></span>
<span class="line"><span style="color:#E1E4E8;">onNext:34</span></span>
<span class="line"><span style="color:#E1E4E8;">onComplete</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">initialization</span></span>
<span class="line"><span style="color:#24292E;">onNext:12</span></span>
<span class="line"><span style="color:#24292E;">onNext:23</span></span>
<span class="line"><span style="color:#24292E;">onNext:34</span></span>
<span class="line"><span style="color:#24292E;">onComplete</span></span></code></pre></div><p>前面构建的自定义 Subscriber 虽然能够正常运作，但因为过于偏底层，因此并不推荐你使用。我们推荐的方法是扩展 Project Reactor 提供的 BaseSubscriber 类。在这种情况下，订阅者可能如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MySubscriber</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseSubscriber</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hookOnSubscribe</span><span style="color:#E1E4E8;">(Subscription </span><span style="color:#FFAB70;">subscription</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;initialization&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hookOnNext</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;onNext:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> value);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MySubscriber</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseSubscriber</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hookOnSubscribe</span><span style="color:#24292E;">(Subscription </span><span style="color:#E36209;">subscription</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;initialization&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hookOnNext</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;onNext:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> value);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里使用了两个钩子方法：hookOnSubscribe(Subscription) 和 hookOnNext(T)。和这两个方法一起，我们可以重载诸如 hookOnError(Throwable)、hookOnCancel()、hookOnComplete() 等方法。</p><h4 id="timeout-操作符" tabindex="-1">timeout 操作符 <a class="header-anchor" href="#timeout-操作符" aria-label="Permalink to &quot;timeout 操作符&quot;">​</a></h4><p>timeout 操作符非常简单，保持原始的流发布者，当特定时间段内没有产生任何事件时，将生成一个异常。</p><h4 id="block-操作符" tabindex="-1">block 操作符 <a class="header-anchor" href="#block-操作符" aria-label="Permalink to &quot;block 操作符&quot;">​</a></h4><p>顾名思义，block 操作符在接收到下一个元素之前会一直阻塞。block 操作符常用来把响应式数据流转换为传统数据流。例如，使用如下方法将分别把 Flux 数据流和 Mono 数据流转变成普通的 List<code>&lt;Order&gt;</code> 对象和单个的 Order 对象，我们同样可以设置 block 操作的等待时间。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Order</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAllOrders</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> orderservice.</span><span style="color:#B392F0;">getAllOrders</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">block</span><span style="color:#E1E4E8;">(Duration.</span><span style="color:#B392F0;">ofSecond</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Order </span><span style="color:#B392F0;">getOrderById</span><span style="color:#E1E4E8;">(Long orderId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> orderservice.</span><span style="color:#B392F0;">getOrderById</span><span style="color:#E1E4E8;">(orderId)</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">block</span><span style="color:#E1E4E8;">(Duration.</span><span style="color:#B392F0;">ofSecond</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Order</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAllOrders</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> orderservice.</span><span style="color:#6F42C1;">getAllOrders</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">block</span><span style="color:#24292E;">(Duration.</span><span style="color:#6F42C1;">ofSecond</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Order </span><span style="color:#6F42C1;">getOrderById</span><span style="color:#24292E;">(Long orderId) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> orderservice.</span><span style="color:#6F42C1;">getOrderById</span><span style="color:#24292E;">(orderId)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">block</span><span style="color:#24292E;">(Duration.</span><span style="color:#6F42C1;">ofSecond</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="log-操作符" tabindex="-1">log 操作符 <a class="header-anchor" href="#log-操作符" aria-label="Permalink to &quot;log 操作符&quot;">​</a></h4><p>Reactor 中专门提供了针对日志的工具操作符 log，它会观察所有的数据并使用日志工具进行跟踪。我们可以通过如下代码演示 log 操作符的使用方法，在 Flux.just() 方法后直接添加 log() 函数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>以上代码的执行结果如下所示（为了显示简洁，部分内容和格式做了调整）。通常，我们也可以在 log() 方法中添加参数来指定日志分类的名称。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Info: | onSubscribe([Synchronous Fuseable] FluxArray.ArraySubscription)</span></span>
<span class="line"><span style="color:#E1E4E8;">Info: | request(unbounded)</span></span>
<span class="line"><span style="color:#E1E4E8;">Info: | onNext(1)</span></span>
<span class="line"><span style="color:#E1E4E8;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">Info: | onNext(2)</span></span>
<span class="line"><span style="color:#E1E4E8;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">Info: | onComplete()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Info: | onSubscribe([Synchronous Fuseable] FluxArray.ArraySubscription)</span></span>
<span class="line"><span style="color:#24292E;">Info: | request(unbounded)</span></span>
<span class="line"><span style="color:#24292E;">Info: | onNext(1)</span></span>
<span class="line"><span style="color:#24292E;">1</span></span>
<span class="line"><span style="color:#24292E;">Info: | onNext(2)</span></span>
<span class="line"><span style="color:#24292E;">2</span></span>
<span class="line"><span style="color:#24292E;">Info: | onComplete()</span></span></code></pre></div><h4 id="debug-操作符" tabindex="-1">debug 操作符 <a class="header-anchor" href="#debug-操作符" aria-label="Permalink to &quot;debug 操作符&quot;">​</a></h4><p>在&quot;01 | 追本溯源：响应式编程究竟是一种什么样的技术体系&quot;中，我们已经提到基于回调和异步的实现方式比较难以调整。响应式编程也是一样，这也是它与传统编程方式之间一个很大的差异点。</p><p>为此，Reactor 框架的设计者也考虑到了普通开发人员的诉求，并开发了专门用于 debug 的操作符。要想启动调试模式，我们需要在程序开始的地方添加如下代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hooks.</span><span style="color:#B392F0;">onOperator</span><span style="color:#E1E4E8;">(providedHook </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	providedHook.</span><span style="color:#B392F0;">operatorStacktrace</span><span style="color:#E1E4E8;">())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hooks.</span><span style="color:#6F42C1;">onOperator</span><span style="color:#24292E;">(providedHook </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	providedHook.</span><span style="color:#6F42C1;">operatorStacktrace</span><span style="color:#24292E;">())</span></span></code></pre></div><p>现在，所有的操作符在执行时都会保存与执行过程相关的附加信息。而当系统出现异常时，这些附加信息就相当于系统异常堆栈信息的一部分，方便开发人员进行问题的分析和排查。</p><p>上述做法是全局性的，如果你只想观察某个特定的流，那么就可以使用检查点（checkpoint）这一调试功能。例如以下代码演示了如何通过检查点来捕获 0 被用作除数的场景，我们在代码中添加了一个名为&quot;debug&quot;的检查点。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(x </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> x)</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">checkpoint</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;debug&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> x)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">checkpoint</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;debug&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>以上代码的执行结果如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Exception in thread </span><span style="color:#9ECBFF;">&quot;main&quot;</span><span style="color:#E1E4E8;"> reactor.core.Exceptions$ErrorCallbackNotImplemented</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> java.lang.ArithmeticException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> by zero</span></span>
<span class="line"><span style="color:#E1E4E8;">	Caused by</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> java.lang.ArithmeticException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> by zero</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Assembly trace from producer [reactor.core.publisher.MonoMap] </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    reactor.core.publisher.Mono.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Mono.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2029</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    com.jianxiang.reactor.demo.Debug.</span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(Debug.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Error has been observed by the following </span><span style="color:#B392F0;">operator</span><span style="color:#E1E4E8;">(s)</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">_  Mono.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Debug.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">_  Mono.</span><span style="color:#B392F0;">checkpoint</span><span style="color:#E1E4E8;">(Debug.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    Suppressed</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> reactor.core.publisher.FluxOnAssembly$AssemblySnapshotException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> zero</span></span>
<span class="line"><span style="color:#E1E4E8;">        at reactor.core.publisher.MonoOnAssembly.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">init</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">(MonoOnAssembly.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        at reactor.core.publisher.Mono.</span><span style="color:#B392F0;">checkpoint</span><span style="color:#E1E4E8;">(Mono.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1304</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;"> more</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Exception in thread </span><span style="color:#032F62;">&quot;main&quot;</span><span style="color:#24292E;"> reactor.core.Exceptions$ErrorCallbackNotImplemented</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> java.lang.ArithmeticException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> by zero</span></span>
<span class="line"><span style="color:#24292E;">	Caused by</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> java.lang.ArithmeticException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> by zero</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Assembly trace from producer [reactor.core.publisher.MonoMap] </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    reactor.core.publisher.Mono.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Mono.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2029</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    com.jianxiang.reactor.demo.Debug.</span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(Debug.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Error has been observed by the following </span><span style="color:#6F42C1;">operator</span><span style="color:#24292E;">(s)</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">_  Mono.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Debug.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">_  Mono.</span><span style="color:#6F42C1;">checkpoint</span><span style="color:#24292E;">(Debug.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    Suppressed</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> reactor.core.publisher.FluxOnAssembly$AssemblySnapshotException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> zero</span></span>
<span class="line"><span style="color:#24292E;">        at reactor.core.publisher.MonoOnAssembly.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">init</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">(MonoOnAssembly.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        at reactor.core.publisher.Mono.</span><span style="color:#6F42C1;">checkpoint</span><span style="color:#24292E;">(Mono.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1304</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        ... </span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;"> more</span></span></code></pre></div><p>可以看到，这个检查点信息会包含在异常堆栈中。根据需要在系统的关键位置上添加自定义的检查点，也是我们日常开发过程中的一种最佳实践。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>好了，这一讲内容就介绍到这。承接上一讲的 Reactor 框架所提供的操作符，这一讲我分别就条件操作符、裁剪操作符以及各种工具操作符展开了详细的说明。在日常开发过程中，这些操作符都比较常见，能够加速我们开发响应式系统的开发过程。</p><p>这里依然给你留一道思考题：在 Reactor 中，如何自己实现一个 Subscriber？</p><p>那么介绍完 Spring 内置的 Reactor 框架之后，从下一讲开始，我们要讨论在 Spring 中使用这一框架来实现响应式组件的具体过程，首先要说的就是全新的 WebFlux 组件。下一讲，我们将详细分析 WebFlux 与传统 WebMVC 之间的区别，希望会带给你新的思路，我们到时见。</p><blockquote><p>点击链接，获取课程相关代码↓↓↓<br><a href="https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git?fileGuid=oD5pMrGWYzgDig8d" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git</a></p></blockquote>`,49);function y(i,u,d,F,b,h){const a=l("Image");return p(),o("div",null,[r,e(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/98/CioPOWBlYDaAMg1pAAPcwZ2XS_I628.png"}),t(),E])}const v=n(c,[["render",y]]);export{C as __pageData,v as default};
